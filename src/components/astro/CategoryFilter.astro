---
import { getCollection } from "astro:content";
import { getCleanSlug, useTranslatedPath, useTranslations, getLocaleFromUrl, getLangFromUrl } from "@i18n/utils.ts";
import { ui } from "@i18n/ui";
import { Category } from "@src/types/category";

const gifts = await getCollection("gifts");
const lang = getLangFromUrl(Astro.url.pathname);
const locale = getLocaleFromUrl(Astro.url.pathname);

const categories: Category[] = ["for-women", "for-men", "for-teens", "for-kids"];
const t = useTranslations(lang, ui);

const generateLinks = () => {
  let links: [string, Category][] = [];

  categories.forEach((category) => {
    const firstItem = gifts.find((i) => i.data.category?.includes(category));

    if (!!firstItem) {
      const firstItemSlug = firstItem?.slug;
      const translatePath = useTranslatedPath(locale);

      const link = translatePath(`/gifts/${category}/${getCleanSlug(firstItemSlug)}`);

      links.push([link, category]);
    }
  });

  return links;
};

const categoryLinks = generateLinks();

const { activeCategory } = Astro.props;
---

<div class="categoryFilter">
  {categoryLinks.map((i) => {
    const navItemClass = activeCategory === i[1] ? "categoryFilter__link_active" : "";

    return (
      <a class={`categoryFilter__link ${navItemClass}`} href={i[0]}>
        {t(i[1])}
      </a>
    );
  })}
</div>

<style lang="scss">
	.categoryFilter {
		margin-bottom: 0.4rem;
		max-height: 150px;
		display: flex;
		gap: 3px;

		&__link {
			text-align: center;
			display: inline-block;
				font-weight: bold;
			border-radius: 2px;
			font-size: 0.8rem;
			padding: 0.2rem 5px;
			flex-grow: 1;
				font-family: var(--font-secondary);

			&:first-letter {
				text-transform: capitalize;
			}
		}

		&__link_active {
			background: #fff;
		}
	}
</style>
